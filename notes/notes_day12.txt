state, passing functions from one component to another through props
life-cycle events
HOC
restful api
redux
routing

state - class component

functional component/statelesss component/presentational component
class component/stateful component

export function Hello(){
	
}

export class Welcome extends Component{

}

class state vs. useState() hook state
1. class state property must be assigned an object, state hook provides state of any nature


//this is how useState hook/ state hook works 
function useState(initialState){
	let state=initialState={a:0, b:0}
	const fnToUpdate=(newState)=>{
		state=newState={a:100, b:0}
	}
	return [state,fnToUpdate]	
}

const [data,setData]=useState({a:0, b:0})
clg(data)=>a:0,b:0
setData({a:100})
clg(data)=>a:100

//setData({a:100,b:0})
setData((oldState)=>{
	return {
	 ...oldState,
	 a:100
	}
   }
)

//no version like this
setData((oldState, props)=>{
	return {
	 ...oldState,
	 a:oldState.a+props.x
	}
   }
)

setState({value:10})
object:
state={ value:0, x:20}
function setState(newState){
	let fresh={
		...this.state,
		...newState
	}
	this.state = fresh
}

state hook: const [someState,setSomeState] = useState(initialState)

lifecyle:
	state={
		products:[]
	}
	mounting: 
	
	constructor -- this.state/this.method = this.method.bind(this)
	**static getDerivedStateFromProps(initialState,currentProps)=> return new state {}
	 => reset the state based on received props
	every time

	render()=> RE
	{
		<table>
	}
	componentDidMount()=>void
	{
		fetch(....)
			.then(
				(result)=>{ 
					result.json().
						then((data)=>this.setState({products:data}))}
		)
	}


	update:
	static getDerivedStateFromProps	
	shouldComponentUpdate(newProps,newState)=>boolean=> whether render() and others followed by render should happen
	{
		if(this.props.productId===newProps.productId || this.state!==null) return false else return true
	}
	
	render
	**getSnapshotBeforeUpdate
	componentDidUpdate(oldProps,oldState)=>void
	{
		if(this.props.productId(2)===oldProps.productId(1))
	fetch(....)
			.then(
				(result)=>{ 
					result.json().
						then((data)=>this.setState({products:data}))}
		)
	}




	error:
	static getDerivedStateFromError(error)=>new state [before render]
	{
		return { errorMessage:error}
	}
	render(){if(this.state.errorMessage!==''){} else {}}
	componentDidCatch(error,info)=>void [after render]
	{
		this.setState({errorMessage:error})
	}


	unmount:
	componentWillUnmount()=>void






















